'use strict';

var selectEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Dropdown'),
    getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject;
var cmdHelper = require('../../../helper/CmdHelper');

module.exports = function (group, element, bpmnFactory, canvas, translate, additionalParams) {

  var bo = getBusinessObject(element);

  function ensureNotNull(prop) {
    if (!prop) {
      throw new Error(prop + ' must be set.');
    }

    return prop;
  }

  function customGet(element) {
    var bo = getBusinessObject(element),
      res = {},
      prop = ensureNotNull(options.modelProperty);
    res[prop] = bo.get(prop);
    return res;
  };

  function customSet(element, values) {
    var bo = getBusinessObject(element),
      res = {},
      prop = ensureNotNull(options.modelProperty);
    if (values[prop] !== '') {
      res[prop] = values[prop];
      bo.fetchPriceData.forEach(priceData => {
        if (priceData.name == values[prop]) {
          res["priceId"] = priceData.id;
        }
      });
    } else {
      res[prop] = "";
    }
    return cmdHelper.updateProperties(element, res);
  };

  function setSourceRefName(name) {
    if (bo.incoming && bo.incoming.length) {
      bo.incoming[0].name = name;
    }
  }

  function getTargetRef() {
    if (bo.targetRef && bo.targetRef.customElementName) {
      return bo.targetRef.customElementName;
    }
    return null;
  }

  var options = {
    id: "ppPrice_list_operation",
    modelProperty: 'pricelist',
    label: translate('Price List Name'),
    inputArr: additionalParams.config.FPPriceList,
    get: customGet,
    set: customSet
  };
  group.entries = group.entries.concat(selectEntryFactory(element, options, translate));
};