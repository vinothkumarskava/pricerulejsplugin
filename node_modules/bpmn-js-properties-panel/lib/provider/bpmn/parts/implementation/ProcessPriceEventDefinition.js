'use strict';

var eventDefinitionReference = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/EventDefinitionReference'),
    elementReferenceProperty = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/ElementReferenceProperty'),
    cmdHelper = require('../../../../helper/CmdHelper'),
    elementHelper = require('../../../../helper/ElementHelper'),
    utils = require('../../../../Utils');

module.exports = function(group, element, bpmnFactory, messageEventDefinition, translate, options) {
  let eventObj = eventDefinitionReference(element, messageEventDefinition, bpmnFactory, {
    label: translate('Operation'),
    elementName: 'operation',
    elementType: 'bpmn:Task',
    referenceProperty: 'operationRef',
    newElementIdPrefix: 'operation_',
    addMultipleElements : options.addMultipleElements,
    inputArr: options.inputArr
  });

  
  function findElementById(eventDefinition, type, id) {
    var elements = utils.findRootElementsByType(eventDefinition, type);
    return find(elements, function(element) {
      return element.id === id;
    });
  }
/*
  if(options.addMultipleElements && options.inputArr)
  {
    var optionTemplate = "";
    forEach(options.inputArr, function(option) {
      //var id = utils.nextId(option);
      //optionTemplate = optionTemplate + '<option value="' + escapeHTML(id) + '"> (id='+escapeHTML(id)+')' + '</option>';
      var values = {selectedElement: utils.nextId(option)};
      setOptionss(element, values);
    });
  }

  function setOptionss(element, values)
  {
    var selection = values.selectedElement;
    var props = {};
    if (!selection || typeof selection === 'undefined') {
      // remove reference to element
      props[referenceProperty] = undefined;
      cmdHelper.updateBusinessObject(element, definition, props);
      return;
    }

    var commands = [];

    var selectedElement = findElementById(definition, elementType, selection);
    if (!selectedElement) {
      var root = utils.getRoot(definition);

      // create a new element
      selectedElement = elementHelper.createElement(elementType, { name: selection }, root, bpmnFactory);
      cmdHelper.addAndRemoveElementsFromList(element, root, 'rootElements', null, [ selectedElement ]);
    }

    // update reference to element
    props[referenceProperty] = selectedElement;
    cmdHelper.updateBusinessObject(element, definition, props);
  }*/

  group.entries = group.entries.concat(eventObj);

  group.entries = group.entries.concat(elementReferenceProperty(element, messageEventDefinition, bpmnFactory, {
    id: 'value-element-name',
    label: translate('Value'),
    referenceProperty: 'operationRef',
    modelProperty: 'name',
    shouldValidate: true
  }));

};
