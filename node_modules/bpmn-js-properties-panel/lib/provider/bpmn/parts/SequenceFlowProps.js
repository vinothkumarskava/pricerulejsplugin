'use strict';

var actionEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Action'),
  selectEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Dropdown'),
  domQuery = require('min-dom').query,
  domQueryAll = require('min-dom').queryAll,
  getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject;

var cmdHelper = require('../../../helper/CmdHelper');

const SUITABILITY_PROCESS_PRICE = "PROCESS_PRICE",
  SUITABILITY_FETCH_PRICE = "FETCH_PRICE";

module.exports = function (group, element, bpmnFactory, canvas, translate, additionalParams, elementRegistry) {

  var bo = getBusinessObject(element);

  function ensureNotNull(prop) {
    if (!prop) {
      throw new Error(prop + ' must be set.');
    }
    return prop;
  }

  //custom set Process Price Value
  function customSetPPValue(element, values) {
    var bo = getBusinessObject(element),
      res = {},
      prop = ensureNotNull('ppConditionValue');
    if (values[prop] !== '') {
      res[prop] = values[prop];
    } else {
      res[prop] = undefined;
    }
    var selectedFPConditionEl = domQuery("select[name='ppConditionValue']");
    setSourceRefValue(selectedFPConditionEl[selectedFPConditionEl.selectedIndex].text);
    return cmdHelper.updateProperties(element, res);
  };

  // custom get for Fetch Price
  function customGet(element) {
    var bo = getBusinessObject(element),
      res = {},
      prop = ensureNotNull('fpConditionKey');
    res[prop] = bo.get(prop);
    var selectedCondition = domQueryAll("div[data-entry^='fpConditionValue_']");
    for (var i = 0; selectedCondition && i < selectedCondition.length; i++) {
      selectedCondition[i].classList.add('bpp-hidden');
    }
    selectedCondition = domQueryAll("div[data-entry^='fpConditionValue_" + res['fpConditionKey'] + "']");
    for (var i = 0; selectedCondition && i < selectedCondition.length; i++) {
      selectedCondition[i].classList.remove('bpp-hidden');
    }

    var condValEl = domQuery("select[name='fpConditionValue_" + res['fpConditionKey'] + "']");
   // setSourceRefName(res[prop]);
    if (condValEl) {
      setSourceRefValue(condValEl && condValEl[condValEl.selectedIndex].text || '');
    } else {
      condValEl = domQuery("div[name='fpConditionValue_" + res['fpConditionKey'] + "']");
      setSourceRefValue(condValEl && condValEl.textContent || "");
    }

    return res;
  };

  // custom set for Fetch Price
  function customSet(element, values) {
    var bo = getBusinessObject(element),
      res = {},
      prop = ensureNotNull('fpConditionKey');
    if (values[prop] !== '') {
      res[prop] = values[prop];
    } else {
      res[prop] = undefined;
    }

    let list = []
    elementRegistry.getAll().map(item => {
      if (item.type === 'bpmn:SequenceFlow') {
        // console.log(item) 
        list.push(item.businessObject);
      }
    })

    const isPresent = list.filter(item => item.$attrs.fpConditionKey === res[prop] && res[prop] !== 'Select_an_Operation').length > 0
    var selectedFPConditionEl = domQuery("select[name='fpConditionKey']");
    if (!isPresent) {
      var selectedCondition = domQueryAll("div[data-entry^='fpConditionValue_']:not([data-entry=fpConditionValue_" + res['fpConditionKey'] + "])");
      for (var i = 0; selectedCondition && i < selectedCondition.length; i++) {
        selectedCondition[i].classList.add('bpp-hidden');
      }
      setSourceRefValue('');
      setSourceRefName(selectedFPConditionEl[selectedFPConditionEl.selectedIndex].text);
      return cmdHelper.updateProperties(element, res);
    } else {
      const newRes = { fpConditionKey: "Select_an_Operation" }
      if (bo.contentText === undefined) {
        var selectedCondition = domQueryAll("div[data-entry^='fpConditionValue_']:not([data-entry=fpConditionValue_" + newRes['fpConditionKey'] + "])");
        for (let i = 0; selectedCondition && i < selectedCondition.length; i++) {
          selectedCondition[i].classList.add('bpp-hidden');
        }
        return cmdHelper.updateProperties(element, newRes);
      }
    }
  };

  function customGetValue(element) {
    var bo = getBusinessObject(element),
      res = {},
      prop = ensureNotNull('fpConditionValue_' + bo.$attrs.fpConditionKey);
    res[prop] = bo.get(prop);

    /* var condValEl = domQuery("select[name='" + prop + "']");
    if (condValEl) {
      setSourceRefValue(condValEl && condValEl[condValEl.selectedIndex].text || '');
    } else {
      condValEl = domQuery("div[name='" + prop + "']");
      setSourceRefValue(condValEl && condValEl.textContent || "");
    } */
    setSourceRefValue(res[prop] || "");
    return res;
  };

  // custom set for Fetch Price Value
  function customSetValue(element, values) {
    var bo = getBusinessObject(element),
      res = {},
      prop = ensureNotNull('fpConditionValue_' + bo.$attrs.fpConditionKey);
    if (values[prop] !== '') {
      res[prop] = values[prop];
    } else {
      res[prop] = undefined;
    }
    var conditionValueEl = domQuery("select[name='" + prop + "']");
    if (conditionValueEl) {
      setSourceRefValue(conditionValueEl && conditionValueEl[conditionValueEl.selectedIndex].text || "");
    } else {
      conditionValueEl = domQuery("div[name='" + prop + "']");
      setSourceRefValue(conditionValueEl && conditionValueEl.textContent || "");
    }
    return cmdHelper.updateProperties(element, res);
  };

  function canShowEl(key) {
    var bo = getBusinessObject(element),
      res = {},
      prop = ensureNotNull('fpConditionKey');
    res[prop] = bo.get(prop);
    var selectedCondition = domQuery("select[name='fpConditionKey']");
    if (res[prop] && (res[prop] == "Select_an_Operation" || res[prop] == "Default_Flow")) {
      return false;
    } else if (!res[prop] && selectedCondition) {
      return selectedCondition && selectedCondition[selectedCondition.selectedIndex].value == key && selectedCondition[selectedCondition.selectedIndex].value != "Select_an_Operation" && selectedCondition[selectedCondition.selectedIndex].value != "Default_Flow";
    } else if (res[prop] == key) {
      return true;
    }
    return false;
  }

  function getSourceRef() {
    if (bo.sourceRef && bo.sourceRef.$type == "bpmn:ExclusiveGateway") {
      return bo.sourceRef;
    }
    return null;
  }

  function getTargetRef() {
    if (bo.targetRef && bo.targetRef.customElementName) {
      return bo.targetRef.customElementName;
    }
    return null;
  }

  function setSourceRefName(name) {
    bo.contentText = name;
    bo.name = name;
  }

  function setSourceRefValue(value) {
    bo.labelValue = value;
  }

  let sourceRef = getSourceRef(),
    targetRef = getTargetRef();
  if (sourceRef && targetRef) {
    var keyOptions = {},
      operatorOptions = {},
      valueOptions = {};
    if (targetRef == SUITABILITY_PROCESS_PRICE ||
      (sourceRef.incoming && sourceRef.incoming[0].sourceRef.customElementName &&
        sourceRef.incoming[0].sourceRef.customElementName == SUITABILITY_FETCH_PRICE)) {
      keyOptions = { id: "ppConditionKey", modelProperty: 'ppConditionKey', label: translate('Key'), inputArr: additionalParams.config.condPPKey };
      operatorOptions = { id: "ppConditionOperator", modelProperty: 'ppConditionOperator', label: translate('Operator'), inputArr: additionalParams.config.condOperator };
      valueOptions = { id: "ppConditionValue", modelProperty: 'ppConditionValue', label: translate('Value'), inputArr: additionalParams.config.condPPValue, set: customSetPPValue };
      group.entries = group.entries.concat(selectEntryFactory(element, keyOptions, translate));
      group.entries = group.entries.concat(selectEntryFactory(element, operatorOptions, translate));
      group.entries = group.entries.concat(selectEntryFactory(element, valueOptions, translate));
    } else {
        keyOptions = { id: "fpConditionKey", modelProperty: 'fpConditionKey', label: translate('Key'), inputArr: additionalParams.config.condFPKey, get: customGet, set: customSet };
        operatorOptions = { id: "fpConditionOperator", modelProperty: 'fpConditionOperator', label: translate('Operator'), inputArr: additionalParams.config.condOperator };
        group.entries = group.entries.concat(selectEntryFactory(element, keyOptions, translate));
        //group.entries = group.entries.concat(selectEntryFactory(element, operatorOptions, translate));
        additionalParams.config.condFPKey.forEach(conditionKey => {
          if (conditionKey.name && canShowEl(conditionKey.value)) {
            group.entries = group.entries.concat(selectEntryFactory(element, operatorOptions, translate));
            if (additionalParams.config.condFPValuesArr[conditionKey.value] && !additionalParams.config.condFPValuesArr[conditionKey.value].length) {
              var options = { id: "fpConditionValue_" + conditionKey.value, modelProperty: 'fpConditionValue_' + conditionKey.value, label: translate('Value'), get: customGetValue, set: customSetValue };
              group.entries = group.entries.concat(actionEntryFactory(element, options, translate));
            } else {
              valueOptions = { id: "fpConditionValue_" + conditionKey.value, modelProperty: 'fpConditionValue_' + conditionKey.value, label: translate('Value'), inputArr: additionalParams.config.condFPValuesArr[conditionKey.value], get: customGetValue, set: customSetValue};
              group.entries = group.entries.concat(selectEntryFactory(element, valueOptions, translate));
            }
          }
        });
    }
  }
};
